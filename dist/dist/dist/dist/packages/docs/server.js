"use strict";
var fs = require('fs');
var path = require('path');
var LRU = require('lru-cache');
var express = require('express');
var cookieParser = require('cookie-parser');
var favicon = require('serve-favicon');
var compression = require('compression');
var microcache = require('route-cache');
var resolve = function (file) { return path.resolve(__dirname, file); };
var createBundleRenderer = require('vue-server-renderer').createBundleRenderer;
var Ouch = require('ouch');
var redirects = require('./src/router/301.json');
var rollbar = require('./src/util/rollbar');
var isProd = process.env.NODE_ENV === 'production';
var useMicroCache = process.env.MICRO_CACHE !== 'false';
var serverInfo = "express/" + require('express/package.json').version + " " +
    ("vue-server-renderer/" + require('vue-server-renderer/package.json').version);
var languages = require('./src/data/i18n/languages');
var availableLanguages = languages.map(function (lang) { return lang.alternate || lang.locale; });
var fallbackLocale = languages.find(function (lang) { return lang.fallback === true; }).locale;
var app = express();
function createRenderer(bundle, options) {
    // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
    return createBundleRenderer(bundle, Object.assign(options, {
        // for component caching
        cache: LRU({
            max: 1000,
            maxAge: 1000 * 60 * 15
        }),
        // recommended for performance
        runInNewContext: false
    }));
}
var renderer;
var readyPromise;
var templatePath = resolve('./src/index.template.html');
if (isProd) {
    // In production: create server renderer using template and built server bundle.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    var template = fs.readFileSync(templatePath, 'utf-8');
    var bundle = require('./dist/vue-ssr-server-bundle.json');
    // The client manifests are optional, but it allows the renderer
    // to automatically infer preload/prefetch links and directly add <script>
    // tags for any async chunks used during render, avoiding waterfall requests.
    var clientManifest = require('./dist/vue-ssr-client-manifest.json');
    renderer = createRenderer(bundle, {
        template: template,
        clientManifest: clientManifest,
        shouldPrefetch: function () { return false; }
    });
}
else {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    readyPromise = require('./build/setup-dev-server')(app, templatePath, function (bundle, options) {
        renderer = createRenderer(bundle, options);
    });
}
var serve = function (path, cache) {
    return express.static(resolve(path), {
        maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
    });
};
app.use(express.json());
app.use(cookieParser());
rollbar.options.enabled && app.use(rollbar.errorHandler());
app.use(compression({ threshold: 0 }));
app.use(favicon('./src/public/favicon.ico'));
app.use('/', serve('./src/public', true));
app.use('/dist', serve('./dist', true));
app.use('/themes', serve('./src/themes'));
app.get('/sitemap.xml', function (req, res) {
    res.setHeader('Content-Type', 'text/xml');
    res.sendFile(resolve('./src/public/sitemap.xml'));
});
var languagePattern = '/([a-z]{2,3}|[a-z]{2,3}-[a-zA-Z]{4}|[a-z]{2,3}-[A-Z]{2,3})';
var languageRegex = new RegExp("^" + languagePattern + "(/.*)?$");
// 301 redirect for changed routes
Object.keys(redirects).forEach(function (k) {
    app.get(new RegExp("^$(" + languagePattern + ")?" + k + "$"), function (req, res) { return res.redirect(301, redirects[k]); });
});
// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 10-minute microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
var cacheMiddleware = microcache.cacheSeconds(10 * 60, function (req) { return useMicroCache && req.originalUrl; });
var ouchInstance = (new Ouch()).pushHandler(new Ouch.handlers.PrettyPageHandler('orange', null, 'sublime'));
function render(req, res) {
    var alternate = languages.find(function (lang) { return lang.alternate && lang.locale === req.params[0]; });
    // Redirect to new locale
    if (alternate) {
        return res.redirect(301, "/" + alternate.alternate + (req.params[1] || ''));
    }
    // Redirect to fallback if locale does not exist
    if (!availableLanguages.includes(req.params[0])) {
        return res.redirect(301, "/" + fallbackLocale);
    }
    var s = Date.now();
    res.setHeader('Content-Type', 'text/html');
    res.setHeader('Server', serverInfo);
    res.cookie('currentLanguage', req.params[0], {
        maxAge: 1000 * 60 * 60 * 24 * 7 // 7 days
    });
    var handleError = function (err) {
        if (err.url) {
            res.redirect(err.url);
        }
        else if (err.code === 404) {
            res.status(404).send('404 | Page Not Found');
        }
        else {
            ouchInstance.handleException(err, req, res, function (output) {
                console.log('Error handled!');
            });
        }
    };
    var context = {
        title: 'Vuetify',
        hostname: req.hostname,
        url: req.url,
        lang: req.params[0],
        res: res,
        hreflangs: availableLanguages.reduce(function (acc, lang) {
            return acc + ("<link rel=\"alternate\" hreflang=\"" + lang + "\" href=\"https://" + req.hostname + "/" + lang + req.params[1] + "\" />");
        }, ''),
        crowdin: ''
    };
    if (context.lang === 'eo-UY') {
        context.crowdin = "\n    <script type=\"text/javascript\">\n      var _jipt = [];\n      _jipt.push(['project', 'vuetify']);\n      _jipt.push(['before_dom_insert', function(text, node, attribute) {\n        if (text.startsWith('##')) return '<h2>' + text + '</h2>';\n        else if (text.startsWith('#')) return '<h1>' + text + '</h1>';\n        else return text;\n      }]);\n    </script>\n    <script type=\"text/javascript\" src=\"//cdn.crowdin.com/jipt/jipt.js\"></script>\n    ";
    }
    renderer.renderToString(context, function (err, html) {
        if (err) {
            return handleError(err);
        }
        res.end(html);
        if (!isProd) {
            console.log("whole request: " + (Date.now() - s) + "ms");
        }
    });
}
app.get(languageRegex, isProd ? render : function (req, res) {
    readyPromise.then(function () { return render(req, res); });
}, cacheMiddleware);
// 302 redirect for no language
app.get('*', function (req, res) {
    var lang = req.cookies.currentLanguage || req.acceptsLanguages(availableLanguages) || fallbackLocale;
    if (!languageRegex.test('/' + lang))
        lang = fallbackLocale;
    res.redirect(302, "/" + lang + req.originalUrl);
});
var port = process.env.PORT || 8095;
var host = process.env.HOST || '0.0.0.0';
app.listen(port, host, function () {
    console.log("server started at " + host + ":" + port);
});
//# sourceMappingURL=server.js.map